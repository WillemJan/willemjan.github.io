---
layout: post
title: Internet of Things for libraries
date: '2021-09-27 10:15'
excerpt: Internet of Things for libraries
comments: false
---

IoT for libraries
=================

**To measure or not to measure that's the question.**

Overview
--------

As the cost of sensors are dropping dramatically (Despite recent COVID hickups) libraries should invest some time and general understanding on how to deploy these. The Internet of Things (IoT) landscape is riddled with commercial companies that want to gather as much data as they can, while I think that a library thrives on privacy. My advise for any library that want's to deploy a massive IoT-network, please be transparent about it, involve your patrons, they have a right to know and might be interested in the subject as well.  
During lockdown I had time to experiment with a lot of (bare-bone) IoT devices, and I will share my IoT-setup here.

<img src="https://s3.eu-central-1.amazonaws.com/centaur-wp/econsultancy/prod/content/uploads/archive/images/resized/0008/6869/atlas_bjsmcfal_2x-blog-flyer.png" alt="Cost of sensors">

What's in it for me
-------------------
Whether your a teacher a librarian or a hacker, in this blog I will try to show you how sensors could be deployed in your environment.  

If you don't have a technical background, some parts of this blog might be hard to understand, I suggest you skip all code parts, and read it anyway to get a little understanding of what all the buzz about Internet of Things is all about.
Since the cost of the devices that are at the core of this revolution (microcontrollers) are now dirt-cheap, it's hard to get devices without them, yes, even your toothbrush will be equipped with these kind of technologies.
Often these devices will be labeled 'smart', what's meant here is that they are connected to some company (via the Internet) that uses data generated by sensors, transmitted by microcontrollers to make some graphs or generate usage profiles of some kind, but be aware, the 'smartness' comes with a hefty privacy-toll.  

If you're not familiar with Linux or Python, I suggest getting into the basics for everything around you is more or less controlled by this (the cloud), find a copy of Linux/Python for beginners from your local library, buy a minicomputer like a Raspberry Pi (€ 37,95) and get your hands dirty!  

<img src="https://whatsgoodtodo.com/wp-content/uploads/2019/03/PlaybrushSmartSonic.png" alt="Smart toothbush">  

A good article about other experiments done inside a actual library appeared in code4lib Issue 38, 2017-10-18.
[Code4Lib Testing Three Types of Raspberry Pi People Counters](https://journal.code4lib.org/articles/12947)

Let's start with the definition IoT devices are. I'm a fan of Wikipedia so here is the obligatory quote:

> The Internet of Things (IoT) describes physical objects (or groups of such objects), that are embedded with sensors, processing ability, software, and other technologies, and that connect and exchange data with other devices and systems over the Internet or other communications networks.

To further narrow down what this blog is about, the IoT industry is huge, there are roughly two top classes by which to divide the IoT world in, IIot and Iot. The extra I in IIot comes from Industry, in this domain the equipment used is more robust, accurate and secure then the equipment used at home. During my education I was exposed to the IIoT side of things, back then these where not even called IoT devices but Programmable Logic Controllers(PLC's). The equipment we used in class was goes by the name of [Adam](https://www.advantech.com/products/modular-i-o-system-adam-5000-series/sub_7a806b75-2b4f-4a04-ae12-270d79a9a6cd). The idea's behind PLC's kindof evolved into IIoT, as these techniques where the driver behind the the third industrial revolution. Mayor companies like Siemens now brand their product as [IIOT](https://siemens.mindsphere.io/en/industrial-iot).
For the home user a lot of stuff sold as IoT works out of the box, setup-procedures are super simple, mostly the device want's to somehow get access to the Internet so you must give it access to your Wi-Fi network, and batta bing your device works. In this blog I will try to explain in detail how this works (Without sending your data to 3rd-parties), and how you can create your own IoT setup.


Let's get technical
-------------------
There are a lot of good resources on the Internet about how-to setup your own IoT landscape, so making the right choices is important.
My weapon of choice for setting thins up is Python, for it's a very accessible programming language, also I like minimalistic solutions, so I won't touch upon big IoT projects like [NodeRed](https://nodered.org/) or how to hookup IoT to the cloud.

Last warning, this a very DIY!

For microcontrollers there is a special Python distribution available for playing with these devices, MicroPython.
I highly recommend this book:

- Programming with MicroPython,
- Embedded programming with microcontrollers & Python
- Nicholas H. Tollervey
- ISBN: 978-1-491-97273-1

Now that we've defined our programming language let's talk hardware, and how you could setup your IoT experiments.

The general idea here is this:

Sensor -> Microcontroller -> Raspberry PI

Sensors
-------
Let's start with the sensor part. There are a lot of things you can measure with sensors, ranging from simple switches to water-levels, radar sensors, CO2 sensors ect.

To explore a wide range of possibilities I suggest getting a sensor-kit, something like this:
![Sensor kit example](https://raw.githubusercontent.com/WillemJan/willemjan.github.io/master/_posts/2021/sensor-kit.jpg)  

The average cost of these kind of kits are about € 15,-.

Most of these sensor have been tested with MicroPython and tutorials on how to connect and operate these are widely available, as well as source code, and MicroPython itself has good online [documentation](https://docs.micropython.org/en/latest/).

In order to attach te sensors to a ESP8266 you will need some wire, I recommend getting some [DuPont wire](https://en.wikipedia.org/wiki/Jump_wire) (Female to Female) should cost about (€ 5,-).


Microcontrollers
----------------
I've tested several devices for this purpose, and the thing I like best and is the ESP8266 used in the [NodeMCU](https://en.wikipedia.org/wiki/NodeMCU).
For all experiments I used Debian 10.10 (Buster) on my laptop and python3 to communicate with the ESP8266 microcontroller, but this can also be done from the Raspberry PI.

<img src="https://raw.githubusercontent.com/WillemJan/willemjan.github.io/master/_posts/2021/esp8266.png" alt="ESP8266 controller">

According to Wikipedia: 

> The ESP8266 is a low-cost Wi-Fi microchip, with a full TCP/IP stack and microcontroller capability, produced by Espressif Systems in Shanghai, China. 

At the time of writing this blog, getting one module will cost you (In the Netherlands):

```
  Cost of an ESP8266: € 2,53
  Cost of shipping:   € 1,44 +
                        ==== 
  Total cost:         € 3,97
```

There are several ways of communicating with the microcontroller, once deployed.

- Scenario 1) Via serial communication using the USB-connection.
- Scenario 2) Via Wi-Fi.
- Scenario 3) By other means, like the SPI bus or using a cheap GMS module (Not covered in this blog).

The first step is to erase and flash new firmware onto the ESP8266 device. Firmware is the software that runs on the microcontroller once it is powered, and it's called firmware because you are not able to modify it once written to the chip without interrupting the whole system.

First install the required tools, firmware and create an initial empty boot.py file.
```
sudo apt install -y picocom esptool 
pip3 install adafruit-ampy
mkdir esp_8266
cd esp_8266
touch boot.py # For now make an empty boot.py, later you can fill this with code to read and transmit sensor data.
wget 'http://micropython.org/resources/firmware/esp8266-20210902-v1.17.bin'
curl -s https://raw.githubusercontent.com/micropython/micropython-lib/master/micropython/urllib.urequest/urllib/urequest.py > ureq.py
```
Once the microcontroller boots, it will run the firmware (Which contains a version of MicroPython) and execute the boot.py file. In this file we will put the logic needed to read data from the attached sensors.

Note that esptool may be outdated, if you get weird errors during invocation, use:
```
sudo apt remove -y esptool
sudo pip3 install esptool
```
See this page for more info on the MicroPython [firmware](http://micropython.org/download/esp8266/), and the github page for the [esptool](https://github.com/espressif/esptool)

Attach your ESP8266 to your USB-port of choice, and verify the connection by identifying the chip:
```
esptool.py chip_id
```

If all is well the output will look something like this:
```
esptool.py v3.2-dev
Found 1 serial ports
Serial port /dev/ttyUSB0
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: e8:db:48:ad:97:fe
Uploading stub...
Running stub...
Stub running...
Chip ID: 0x00ad97fd
Hard resetting via RTS pin...
```

Next is creating a little flash & disaster recovery script:
```
#!/usr/bin/env bash

esptool.py --port /dev/ttyUSB0 erase_flash
esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=detect 0 esp8266-20210902-v1.17.bin

ampy  -p /dev/ttyUSB0 put boot.py
ampy  -p /dev/ttyUSB0 ls
ampy  -p /dev/ttyUSB0 mkdir urequests
ampy  -p /dev/ttyUSB0 put ureq.py /urequests/__init__.py
ampy  -p /dev/ttyUSB0 get boot.py

picocom --baud 115200 /dev/ttyUSB0 # This will create a connection to your ESP, to quit press CTRL-a, CTRL-x
```
Whenever you can't get readings from your ESP8266, don't hesitate to flash it again.

Using the serial connection you will be able te transfer data very reliable, but not as fast as over Wi-Fi (2.7 mega bits/sec) according to this [load tesing an esp8266](https://arunoda.me/blog/load-testing-an-esp8266).
But for low-latency and high reliability/security data transfer a serial connection works just fine, I've tested the Python library 'pyserial' to get readings directly from the USB-port and this works like a charm.

Installing pyserial:
```
sudo pip3 install pyserial
```

Code for serial communication with the ESP8266:
```
#!/usr/bin/env python3

import serial

ser = serial.Serial('/dev/ttyUSB0', 115200)
while True:
    print(ser.readline().decode("utf-8").strip())
```

Please note the port, which by default will be '/dev/ttyUSB0' under Debian, it might be different on your OS, if unsure check the output of:
```
sudo dmesg
```

By default the ESP8266 turns on a Wi-Fi Access Point (AP), if you want to use a serial connection it's wise to turn the Wi-Fi completely using the following code: (You can add this to the boot.py file using your favorite editor.)
```
import network
sta_if = network.WLAN(network.STA_IF)
sta_if.active(False)
ap_if = network.WLAN(network.AP_IF)
ap_if.active(False)
```
An AP is normaly used to connect to, you can do nice things with this option, like update the firmware and run a webserver, but for this blog I will not explore this scenario.

I prefer to let the ESP8266 send data, rather then having the Raspberry PI poll all the ESP8266's deployed, so I recommend turning off the access point (Which will by default show up something like 'MicroPython-2884894' in your Wi-Fi network list).
In order to do this, the last 2 lines of the code-snippet above will have to run first, before starting the main loop, add them to the boot.py file.

Raspberry PI
------------
For my test setup I used a Netgear ProSAFE GS108OE (€ 89,95) as [Power Over Ethernet](https://en.wikipedia.org/wiki/Power_over_Ethernet) (POE) switch to power the Raspberry PI, the Raspberry PI will in it's turn power the ESP8266 microcontroller, and the ESP8266 will power the sensors.
The final components, a network-cable and a POE-splitter will split power and Ethernet signal needed to power up the Raspberry, they are available for about (€ 8,-).

So the power will flow like this:

POE-switch -> Network cable -> POE-splitter -> Raspberry PI -> USB micro cable -> ESP8266 -> DuPont wire -> Sensors

The final setup will look something like the image shown below:
<img src="https://raw.githubusercontent.com/WillemJan/willemjan.github.io/master/_posts/2021/iot_setup.JPG" alt="Final IoT setup" width=768px>

The information gathered from the sensors will travel the oposite way like this:

Scenario 1)  
POE-switch <- Network cable <- POE-splitter <- Raspberry PI <- USB micro cable <- ESP8266 <- DuPont wire <- Sensors

Scenario 2)  
POE-switch <- Network cable <- POE-splitter <- Raspberry PI ) Wi-Fi ( ESP8266 <- DuPont wire <- Sensors

By creating a setup like this you will be able to separate all IoT related traffic from the rest of your network.
The data will be processed on the Raspberry PI, from your internal network you will only need access to the Raspberry PI's webinterface to look at the stats generated by accumulating sensor data.



